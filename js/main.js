// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var boardIsFull, collapseCells, generateTile, getColumn, getRandomCellIndecies, getRow, mergeCells, ppArray, randomIndex, randomValue, setColumn, setRow;
    ppArray = function(array) {
      var row, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        row = array[_i];
        _results.push(console.log(row));
      }
      return _results;
    };
    this.board = [0, 1, 2, 3].map(function(x) {
      return [0, 1, 2, 3].map(function(y) {
        return 0;
      });
    });
    randomIndex = function(x) {
      return Math.floor(Math.random() * 4);
    };
    getRandomCellIndecies = function() {
      return [randomIndex(4), randomIndex(4)];
    };
    randomValue = function() {
      var val, values;
      values = [2, 2, 2, 2, 2, 4];
      return val = values[randomIndex(values.length)];
    };
    boardIsFull = function(board) {
      var x, y, _i, _j;
      for (x = _i = 0; _i <= 3; x = ++_i) {
        for (y = _j = 0; _j <= 3; y = ++_j) {
          if (board[x][y] === 0) {
            return false;
          }
        }
      }
      return true;
    };
    generateTile = function(board) {
      var val, x, y, _ref;
      if (!boardIsFull(board)) {
        val = randomValue();
        _ref = getRandomCellIndecies(), x = _ref[0], y = _ref[1];
        if (board[x][y] === 0) {
          return board[x][y] = val;
        } else {
          return generateTile(board);
        }
      }
    };
    $('body').keydown(function(e) {
      var key, keys;
      key = e.which;
      keys = [37, 38, 39, 40];
      if ($.inArray(key, keys) > -1) {
        e.preventDefault();
      }
      switch (key) {
        case 37:
          return console.log('left');
        case 38:
          return console.log('up');
        case 39:
          return console.log('right');
        case 40:
          return console.log('down');
      }
    });
    generateTile(this.board);
    generateTile(this.board);
    ppArray(this.board);
    getRow = function(row, board) {
      return board[row];
    };
    getColumn = function(columnNum, board) {
      var b, c;
      b = board;
      c = columnNum;
      return [b[0][c], b[1][c], b[2][c], b[3][c]];
    };
    setRow = function(newArray, rowNumber, board) {
      newArray = row;
      return board[rowNumber] = row;
    };
    setColumn = function(newArray, columnNumber, board) {
      var b, c;
      c = columnNumber;
      b = board;
      return b[0][c] = newArray[0], b[1][c] = newArray[1], b[2][c] = newArray[2], b[3][c] = newArray[3], newArray;
    };
    setColumn([2, 2, 2, 2], 3, this.board);
    ppArray(this.board);
    collapseCells = function(cells, direction) {
      var i, padding, _i;
      cells = cells.filter(function(x) {
        return x !== 0;
      });
      padding = 4 - cells.length;
      for (i = _i = 0; 0 <= padding ? _i < padding : _i > padding; i = 0 <= padding ? ++_i : --_i) {
        switch (direction) {
          case 'right':
            cells.unshift(0);
            break;
          case 'left':
            cells.push(0);
            break;
          case 'down':
            cells.unshift(0);
            break;
          case 'up':
            cells.push(0);
        }
      }
      return cells;
    };
    mergeCells = function(cells, direction) {
      var i, j, value, _i, _j, _k, _l, _ref, _ref1;
      value = cells;
      switch (direction) {
        case 'left':
        case 'up':
          for (i = _i = 0; _i < 3; i = ++_i) {
            for (j = _j = _ref = i + 1; _ref <= 3 ? _j <= 3 : _j >= 3; j = _ref <= 3 ? ++_j : --_j) {
              if (value[i] === 0) {
                break;
              } else if (value[i] === value[j]) {
                value[i] = value[i] * 2;
                value[j] = 0;
                break;
              } else {
                if (value[j] !== 0) {
                  break;
                }
              }
            }
          }
          break;
        case 'right':
        case 'down':
          for (i = _k = 3; _k > 0; i = --_k) {
            for (j = _l = _ref1 = i - 1; _ref1 <= 0 ? _l <= 0 : _l >= 0; j = _ref1 <= 0 ? ++_l : --_l) {
              if (value[i] === 0) {
                break;
              } else if (value[i] === value[j]) {
                value[i] = value[i] * 2;
                value[j] = 0;
                break;
              } else {
                if (value[j] !== 0) {
                  break;
                }
              }
            }
          }
      }
      return value;
    };
    console.log("mergeCells: " + mergeCells([2, 2, 2, 2], 'left'));
    console.log("mergeCells: " + mergeCells([2, 2, 2, 2], 'right'));
    console.log("mergeCells: " + mergeCells([2, 4, 2, 2], 'left'));
    console.log("mergeCells: " + mergeCells([4, 2, 0, 2], 'up'));
    return console.log("mergeCells: " + mergeCells([4, 0, 0, 4], 'left'));
  });

}).call(this);

//# sourceMappingURL=main.map
